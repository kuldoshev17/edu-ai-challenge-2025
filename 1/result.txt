For a new social platform application with millions of users, requiring storage of user profiles, posts, and user connections, with an 80% read and 20% write workload and strong scalability needs, the best approach is to use a combination of databases tailored to each data type and workload:

## Recommended Database Combination

**1. Graph Database for User Connections**  
- User connections represent complex, relationship-heavy data best modeled by graph databases such as Neo4j or NebulaGraph. These databases efficiently handle queries about social graphs, followers, friends, and recommendations, which are core to social platforms[6].  
- Graph databases excel at relationship traversal and can scale to billions of edges, making them ideal for social networking connections.

**2. Relational or Document Database for User Profiles and Posts**  
- User profiles are structured data, and posts can be semi-structured (text, media metadata). Relational databases like PostgreSQL or MySQL provide strong consistency, complex query capabilities, and mature tooling for structured data[1][7][8].  
- Document databases like MongoDB offer schema flexibility and horizontal scaling, which is useful for evolving post formats and rapid development[3].  
- Using relational databases for profiles and document databases for posts is a common pattern, as seen in major social platforms[6][8].

**3. Key-Value Store for Caching and Session Management**  
- To optimize read speed and reduce load on primary databases, use an in-memory key-value store like Redis for caching frequently accessed data (e.g., user sessions, timelines, feed data)[3].  
- Redis offers sub-millisecond latency and supports real-time features critical for social apps.

## Why This Combination?

- **High Read Performance:** Graph databases and document/relational databases can be optimized for read-heavy workloads, and caching layers further improve response times[1][3].  
- **Scalability:** Graph databases like NebulaGraph and document stores like MongoDB support horizontal scaling. Relational databases such as PostgreSQL can scale vertically and with clustering solutions. Redis scales well as a cache[3][6][7].  
- **Data Model Fit:** Each database type matches the data's natureâ€”graph for relationships, relational/document for user data and posts, key-value for fast access and ephemeral data[6][7].  
- **Proven Industry Practice:** Leading social platforms use multi-database architectures combining relational, graph, and key-value stores to handle diverse workloads and data types efficiently[6][8].

## Additional Considerations

- Prototype and benchmark your workload to identify bottlenecks and tune configurations before full deployment[6].  
- Ensure data security and privacy by selecting databases that support encryption, authentication, and compliance features[6].  
- Consider multi-region deployment and replication to ensure high availability and fault tolerance as the user base grows.

---

**Summary:**  
Use a **graph database** (e.g., Neo4j, NebulaGraph) for modeling user connections, a **relational (PostgreSQL/MySQL) or document database (MongoDB)** for user profiles and posts, and a **key-value store (Redis)** for caching and session management. This combination aligns with data types, workload characteristics, scalability needs, and industry best practices for social media applications.

[1] https://www.reddit.com/r/Database/comments/1cr0zqt/which_database_do_you_recommend_for_read_heavy/
[2] https://benchant.com/blog/workload-read-write-ratio
[3] https://sealos.io/blog/the-best-db-to-pick-on-sealos
[4] https://stackoverflow.com/questions/9447034/which-nosql-database-is-best-for-high-volume-inserts-writes
[5] https://www.okoone.com/spark/product-design-research/choosing-the-right-database-for-an-app/
[6] https://www.nebula-graph.io/posts/how-to-choose-database-for-social-media-app
[7] https://www.webdevstory.com/choosing-the-right-database/
[8] https://olibr.com/blog/best-databases-for-social-media-apps/