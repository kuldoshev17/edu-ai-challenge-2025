You are tasked with selecting the most suitable database for a new social platform application with millions of users. The application needs to store user profiles, posts, and the connections between users. It requires high data read speed, with an expected workload of 80% reads and 20% writes. Scalability is crucial as the user base will grow over time.

Let's think step-by-step to determine the best database choice:

1. Identify the types of data to be stored:
   - User profiles (structured data)  
   - Posts (possibly semi-structured or unstructured data)  
   - Connections between users (graph-like relationships)

2. Consider workload characteristics:  
   - High read-to-write ratio (80% reads, 20% writes) suggests prioritizing read-optimized databases.

3. Evaluate data relationships:  
   - Connections between users imply complex relationships best modeled with graph databases.

4. Assess scalability needs:  
   - The database must handle millions of users and scale horizontally.

5. Review database types and their suitability:  
   - Relational databases (e.g., MySQL, PostgreSQL) are strong with structured data and complex queries but may face challenges scaling horizontally.  
   - Key-value stores (e.g., Redis, DynamoDB) excel in fast read/write but may lack relational capabilities.  
   - Document databases handle semi-structured data well but may not efficiently model complex relationships.  
   - Graph databases (e.g., Neo4j, NebulaGraph) are optimized for relationship-heavy data and can efficiently query user connections.

6. Consider practical usage by leading social platforms:  
   - Major platforms use a combination of databases to handle different data types and workloads.  
   - For example, Facebook uses MySQL for social data and other specialized databases for storage and management.

7. Make a recommendation based on the above:  
   - Use a graph database to model user connections and relationships.  
   - Use a relational or document database for profiles and posts to handle structured and semi-structured data.  
   - Consider key-value stores for caching and session management to optimize read speed.

8. Highlight the importance of testing and modeling:  
   - Prototype with different database models to identify bottlenecks and optimize performance before full deployment.

Based on this reasoning, what database or combination of databases would you recommend for this social platform application, and why?